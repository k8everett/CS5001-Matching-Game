Kate Everett
CS5001, Fall 2020
Final Project
Design Document

I.	Classes
	A.	Game
		1.	Attributes
			i)	self.t
			ii)	self.s
			iii)	self.validated_cfg_file
			iv)	self.validated_leaderboard_file
			v)	self.cfg_contents
			vi)	self.board
			vii)	self.quit_button
			viii)	self.leaderboard
			ix)	self.theme_number
			x)	self.invalid_theme_numbers
			xi)	self.theme_files
			xii)	self.user_name
			xiii)	self.number_of_cards
			xiv)	self.matches
			xv)	self.guesses
			xvi)	self.card_image_names
			xvii)	self.card_back
			xviii)	self.cards
			xix)	self.clicked_cards
			xx)	self.matched_cards
		2.	Methods
			i)	__init__
			ii)	get_user_input
			iii)	check_theme_availability
			iv)	make_theme_files
			v)	validate_theme_number
			vi)	create_card_images
			vii)	check_back_card
			viii)	create_cards
			ix)	deal_cards
			x)	check_end_game
			xi)	check_click_location
			xii)	check_for_match
			xiii)	game_control
			xiv)	input_start
			xv)	game_start
			xvi)	unclick_cards
			xvii)	update_matched_cards
			xviii)	set_matched_cards
			xix)	update_clicked_cards
			xx)	get_click_location
	B.	Card
		1.	Attributes
			i)	self.name
			ii)	self.back
			iii)	self.s
			iv)	self.t
			v)	self.x
			vi)	self.y
			vii)	self.boundaries
			viii)	self.clicked
			ix)	self.matched
		2.	Methods
			i)	__init__
			ii)	position_card
			iii)	get_card_boundaries
			iv)	flip_card_up
			v)	flip_card_down
			vi)	set_clicked
			vii)	set_unclicked
			viii)	hide_turtle
			ix)	set_matched
			x)	get_clicked_status
			xi)	get_matched_status
			xii)	__eq__
	C.	Board
		1.	Attributes
			i)	self.s
			ii)	self.t
			iii)	self.user_name
			iv)	self.number_of_cards
		2.	Methods
			i)	__init__
			ii)	make_game_area
			iii)	make_status_area
			iv)	make_leaderboard_area
			v)	set_user_input
			vi)	validate_number_of_cards
			vii)	display_leaderboard
			viii)	display_status
			ix)	create_board
			x)	get_user_name
			xi)	get_number_of_cards
			xii)	remove_image
			xiii)	display_warning
			xiv)	display_back_card_warning
	D.	ValidationService
		1.	Attributes
			i)	self.file_name
			ii)	self.file_not_found_image
			iii)	self.s
			iv)	self.valid
			v)	self.file_contents
			vi)	self.timer_status
		2.	Methods
			i)	__init__
			ii)	validate_file
			iii)	validate_images
			iv)	remove_image
			v)	get_validity_status
			vi)	get_file_contents
			vii)	get_time_status
	E.	Leaderboard
		1.	Attributes
			i)	self.leaderboard_file_name
			ii)	self.board
			iii)	self.leaderboard_contents
		2.	Methods
			i)	__init__
			ii)	set_leaderboard
			iii)	order_leaderboard_contents
			iv)	update_leaderboard
			v)	write_leaderboard
	F.	QuitService
		1.	Attributes
			i)	self.button
			ii)	self.message
			iii)	self.x
			iv)	self.y
			v)	self.s
			vi)	self.t
			viii)	self.boundaries
		2.	Methods
			i)	__init__
			ii)	display_button
			iii)	get_button_boundaries
			iv)	quit_game
			v)	remove_image
	G.	TextService
		1.	Attributes
			i)	self.text
			ii)	self.x
			iii)	self.y
			iv)	self.color
			v)	self.t
		2.	Methods
			i)	__init__
			ii)	move_pen
			iii)	add_text
			iv)	remove_text
	H.	Rectangle
		1.	Attributes
			i)	self.width
			ii)	self.height
			iii)	self.x
			iv)	self.y
			v)	self.color
			vi)	self.t
		2.	Methods
			i)	__init__
			ii)	move_pen
			iii)	draw

II.	Data Structures- My programs utilized lists, including nested lists, to store information such as file contents and card objects.

III.	Testing- My testing approach was to identify “worst-case” scenarios, such as an invalid configuration file and an invalid leaderboard file, that could occur during gameplay. With these scenarios in mind, I worked to write methods that could account for these situations as well as “normal” conditions. I also checked to make sure that my program wouldn’t break under user errors, such as clicking new cards before the current ones have flipped, hitting cancel when asked to enter a number of cards to play with, using invalid images and files, or altering the leaderboard.

IV.	Final Note- The cfg file (CONFIGURATION_FILE) in Game is set to “themes.cfg”, but you can change it to any of the cfg files within the folder. All of the files are considered “themed” except for the dogs.cfg file, which I made to show that my program can handle any valid cfg file passed in, not just the themed files I made.
